#include<iostream>
#include<string>
#include<iomanip>
using namespace std;

//global constant
const int DEFAULT_CAPACITY = 10;

//class declaration
class CoffeeMachine
{
public:
	//default constructor
	CoffeeMachine()
	{
		this->curr_water = 0;
		this->curr_coffee = 0;
		this->water_capacity = DEFAULT_CAPACITY;
		this->coffee_capacity = DEFAULT_CAPACITY;
	    this->coffee_spoons_per_cup = 1;
		this-> name = "UNTITLED";
        cout << "Created Coffee Machine " << name << " with empty resources." << endl;

	}
	//second constructor, coffee machine name
	CoffeeMachine(string name)
	{
        //CoffeeMachine();
		this->curr_water = 0;
		this->curr_coffee = 0;
		this->water_capacity = DEFAULT_CAPACITY;
		this->coffee_capacity = DEFAULT_CAPACITY;
	    this->coffee_spoons_per_cup = 1;
		this-> name = "DECAF";
        cout << "Created Coffee Machine " << name << " with empty resources." << endl;

	}
	//third constructor,
	CoffeeMachine(string name, int x, int y)
	{
        this->curr_water = 0;
        this->curr_coffee = 0;
        this->coffee_spoons_per_cup = 1;
        this-> name = "BLEND";
        cout << "Starting up Coffee Machine " << name << " with empty resources and capacities:" << endl;
        this->water_capacity = x;
        this->coffee_capacity = y;
        cout << right << setw(22) << "water_capacity=" << water_capacity << endl;
        cout << right << setw(23) << "coffee_capacity=" << coffee_capacity << endl;
		cout << endl;
	}
	~CoffeeMachine()
	{
		cout << "shutting down Coffee Machine " << name << " with the following resources left:" << endl;
		cout << right << setw(7) << "water:" << curr_water << endl;
		cout << right << setw(8) << "coffee:" << curr_coffee << endl;
        cout << endl;
	}

	string name;
	int makeCups(int);
	void addWater(int);
	void addCoffee(int);
	void setCoffeeSpoonsPerCup(int);
	void displayCM();

protected:
	int coffee_spoons_per_cup;

private:
	int water_capacity;
	int coffee_capacity;
	int curr_water;
	int curr_coffee;
	void makeSingleCup();

};

//Functions
//mutator function, set water
void CoffeeMachine::addWater(int w)
{

        int water_overflow;
        curr_water = w;

        if (curr_water <= 0)
            {
            //cout << "Invalid" << endl;
            return;
            }
        //fills tank to full capacity if cups more than 10
        if (curr_water > DEFAULT_CAPACITY && curr_water < DEFAULT_CAPACITY + 1) // || curr_water < Blend_water_capacity)
            {

            water_overflow = curr_water - DEFAULT_CAPACITY;
            curr_water = curr_water - water_overflow;
            return;
            }



       // water_capacity = DEFAULT_CAPACITY + 5;
        //displayCM();
 /*       int BLEND_water_overflow;
        if (curr_water >= DEFAULT_CAPACITY +1 )
            {
            water_capacity = DEFAULT_CAPACITY + 5;
            BLEND_water_overflow = curr_water - water_capacity;
            curr_water = curr_water - BLEND_water_overflow;

            }

*/
           //cout << "WATER TANK CAPACITY: " << water_capacity<< endl;

};

//mutator function, set coffee
void CoffeeMachine::addCoffee(int c)
{
        int coffee_overflow;
        curr_coffee = c;

        if (curr_coffee <= 0)
            {
           // cout <<"Invalid!" << endl;
            return;
            }
        if (curr_coffee > DEFAULT_CAPACITY && curr_coffee < DEFAULT_CAPACITY +1 ) //  || curr_coffee < Blend_coffee_capacity)
            {

            coffee_overflow = curr_coffee - DEFAULT_CAPACITY;
            curr_coffee = curr_coffee - coffee_overflow;
            return;
            }


        //coffee_capacity = DEFAULT_CAPACITY +10;
       // displayCM();
  /*       int BLEND_coffee_overflow;
            if (curr_coffee >= DEFAULT_CAPACITY +1 )
            {
            coffee_capacity = DEFAULT_CAPACITY +10;
            BLEND_coffee_overflow = curr_coffee - coffee_capacity;
            curr_coffee = curr_coffee - BLEND_coffee_overflow;

            }
*/


            //cout << "COFFEE TANK CAPACITY: " << coffee_capacity << endl;


};


//check if resources are enough before making a cup
int CoffeeMachine::makeCups(int cups)
{


        if (cups > curr_water || cups > curr_coffee)
            {
            cout << right << setw(3) << "ordered " << cups << " cups of coffee of strength 1" << endl;
            cout <<"NOT ENOUGH RESOURCES!";// << endl;
            //cout << endl;
            }
        else
            {
            cout <<"ordered " << cups << " cups of coffee of strength 1" << endl;
                int i = 0;
                while (i < cups )
                    {
                    makeSingleCup();
                    i++;
                    }

        //update the status of current water/coffee level in container
        curr_water = curr_water - cups;
        curr_coffee = curr_coffee - cups;

        cout << endl;
        displayCM();
            }



};

//make coffee per cup
void CoffeeMachine::makeSingleCup()
{
  cout << "...made cup of coffee" << right << setw(6) << name << "..." << endl;

};

//display status
void CoffeeMachine::displayCM()
{
   // water_capacity = DEFAULT_CAPACITY;
   // coffee_capacity = DEFAULT_CAPACITY;

    cout <<"Current state of CM: " << name <<endl;
    cout << right << setw(7) << "WATER:" << right << setw(3) << curr_water << right << setw(2) << "/" << right << setw(3) << water_capacity << right << setw(7) << "(cups)" << endl;
    cout << right << setw(8) << "COFFEE:" << right << setw(2) << curr_coffee << right << setw(2) << "/" << right << setw(3) << coffee_capacity << right << setw(9) << "(spoons)" << endl;
    cout << right << setw(10) << "STRENGTH:" << right << setw(2) << coffee_spoons_per_cup << right << setw(22) << "coffee spoons per cup" << endl;
    cout << endl;
};

//coffee spoon per cup
void CoffeeMachine::setCoffeeSpoonsPerCup(int cspc)
{
     coffee_spoons_per_cup = cspc;
};



int main()
{
    //int w, c;
    //int water_capacity, coffee_capacity;

	CoffeeMachine cm1;
      //cm1 objects
    cm1.addWater(8);
    cm1.addCoffee(8);
    cm1.displayCM();
    cm1.makeCups(5);

    CoffeeMachine cm2("DECAF");
      //cm2 objects
    cm2.addWater(10);
    cm2.addCoffee(10);
    cm2.displayCM();
    cm2.makeCups(14);

    CoffeeMachine cm3("BLEND",15,20);
    //cm3.displayCM();
     //cm3 objects


    cm3.addWater(14);
    cm3.addCoffee(20);
    cm3.displayCM();
    cm3.makeCups(12);
   // cm3.displayCM();
    cm3.makeCups(5);
    cout << right << setw(8) << "ABORT.";
    cout << endl;
    //cm3.addWater(5);
    //cm3.addCoffee(5);

	system("pause");
	return 0;
}
